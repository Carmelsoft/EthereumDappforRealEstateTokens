// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
let proof = require('../../zokrates/code/square/proof.json');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];
    const account_three = accounts[2];
    const account_four = accounts[3];

    describe('Test Square Verifier', function () {
        beforeEach(async function () { 

            this.contract = await Verifier.new({from: account_one});
           
        })

        //Test verification with correct proof
        it('Test verification with correct proof', async function () { 
            
            let retVal = await this.contract.verifyTx(proof.proof.a,
                proof.proof.b,
                proof.proof.c,
                proof.inputs,
                { from: account_one}
            )

            assert.equal(retVal, true, 'Did not verify transaction');

        })

         //Test verification with incorrect proof
         it('Test verification with incorrect proof', async function () { 
               
            let successful = true;

            try
            {
                //switched around a and b
                successful = await this.contract.verifyTx(proof.proof.b,
                proof.proof.a,
                proof.proof.c,
                proof.inputs,
                { from: account_one}
            )
            } catch(e)
            {
                successful = false;
            }

            assert.equal(successful, false, 'Did not verify false transaction');

        })

    });

})

